// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/message_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/censys/scan-takehome/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockScanProcessor is a mock of ScanProcessor interface.
type MockScanProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockScanProcessorMockRecorder
}

// MockScanProcessorMockRecorder is the mock recorder for MockScanProcessor.
type MockScanProcessorMockRecorder struct {
	mock *MockScanProcessor
}

// NewMockScanProcessor creates a new mock instance.
func NewMockScanProcessor(ctrl *gomock.Controller) *MockScanProcessor {
	mock := &MockScanProcessor{ctrl: ctrl}
	mock.recorder = &MockScanProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanProcessor) EXPECT() *MockScanProcessorMockRecorder {
	return m.recorder
}

// ProcessScanResult mocks base method.
func (m *MockScanProcessor) ProcessScanResult(ctx context.Context, scanResult *domain.ScanResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScanResult", ctx, scanResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessScanResult indicates an expected call of ProcessScanResult.
func (mr *MockScanProcessorMockRecorder) ProcessScanResult(ctx, scanResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScanResult", reflect.TypeOf((*MockScanProcessor)(nil).ProcessScanResult), ctx, scanResult)
}
