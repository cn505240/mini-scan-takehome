// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/scan_processor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/censys/scan-takehome/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockScanRepository is a mock of ScanRepository interface.
type MockScanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScanRepositoryMockRecorder
}

// MockScanRepositoryMockRecorder is the mock recorder for MockScanRepository.
type MockScanRepositoryMockRecorder struct {
	mock *MockScanRepository
}

// NewMockScanRepository creates a new mock instance.
func NewMockScanRepository(ctrl *gomock.Controller) *MockScanRepository {
	mock := &MockScanRepository{ctrl: ctrl}
	mock.recorder = &MockScanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanRepository) EXPECT() *MockScanRepositoryMockRecorder {
	return m.recorder
}

// GetLatestScan mocks base method.
func (m *MockScanRepository) GetLatestScan(ctx context.Context, ip string, port uint32, service string) (*domain.ServiceScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestScan", ctx, ip, port, service)
	ret0, _ := ret[0].(*domain.ServiceScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestScan indicates an expected call of GetLatestScan.
func (mr *MockScanRepositoryMockRecorder) GetLatestScan(ctx, ip, port, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestScan", reflect.TypeOf((*MockScanRepository)(nil).GetLatestScan), ctx, ip, port, service)
}

// UpsertScan mocks base method.
func (m *MockScanRepository) UpsertScan(ctx context.Context, scan *domain.ServiceScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScan", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertScan indicates an expected call of UpsertScan.
func (mr *MockScanRepositoryMockRecorder) UpsertScan(ctx, scan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScan", reflect.TypeOf((*MockScanRepository)(nil).UpsertScan), ctx, scan)
}
